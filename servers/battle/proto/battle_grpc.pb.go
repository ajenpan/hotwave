// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: servers/battle/proto/battle.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BattleClient is the client API for Battle service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BattleClient interface {
	CreateBattle(ctx context.Context, in *CreateBattleRequest, opts ...grpc.CallOption) (*CreateBattleResponse, error)
	WatcherJoinBattle(ctx context.Context, in *WatcherJoinBattleRequest, opts ...grpc.CallOption) (*WatcherJoinBattleResponse, error)
}

type battleClient struct {
	cc grpc.ClientConnInterface
}

func NewBattleClient(cc grpc.ClientConnInterface) BattleClient {
	return &battleClient{cc}
}

func (c *battleClient) CreateBattle(ctx context.Context, in *CreateBattleRequest, opts ...grpc.CallOption) (*CreateBattleResponse, error) {
	out := new(CreateBattleResponse)
	err := c.cc.Invoke(ctx, "/battle.Battle/CreateBattle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *battleClient) WatcherJoinBattle(ctx context.Context, in *WatcherJoinBattleRequest, opts ...grpc.CallOption) (*WatcherJoinBattleResponse, error) {
	out := new(WatcherJoinBattleResponse)
	err := c.cc.Invoke(ctx, "/battle.Battle/WatcherJoinBattle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BattleServer is the server API for Battle service.
// All implementations must embed UnimplementedBattleServer
// for forward compatibility
type BattleServer interface {
	CreateBattle(context.Context, *CreateBattleRequest) (*CreateBattleResponse, error)
	WatcherJoinBattle(context.Context, *WatcherJoinBattleRequest) (*WatcherJoinBattleResponse, error)
	mustEmbedUnimplementedBattleServer()
}

// UnimplementedBattleServer must be embedded to have forward compatible implementations.
type UnimplementedBattleServer struct {
}

func (UnimplementedBattleServer) CreateBattle(context.Context, *CreateBattleRequest) (*CreateBattleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBattle not implemented")
}
func (UnimplementedBattleServer) WatcherJoinBattle(context.Context, *WatcherJoinBattleRequest) (*WatcherJoinBattleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WatcherJoinBattle not implemented")
}
func (UnimplementedBattleServer) mustEmbedUnimplementedBattleServer() {}

// UnsafeBattleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BattleServer will
// result in compilation errors.
type UnsafeBattleServer interface {
	mustEmbedUnimplementedBattleServer()
}

func RegisterBattleServer(s grpc.ServiceRegistrar, srv BattleServer) {
	s.RegisterService(&Battle_ServiceDesc, srv)
}

func _Battle_CreateBattle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBattleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BattleServer).CreateBattle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/battle.Battle/CreateBattle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BattleServer).CreateBattle(ctx, req.(*CreateBattleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Battle_WatcherJoinBattle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatcherJoinBattleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BattleServer).WatcherJoinBattle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/battle.Battle/WatcherJoinBattle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BattleServer).WatcherJoinBattle(ctx, req.(*WatcherJoinBattleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Battle_ServiceDesc is the grpc.ServiceDesc for Battle service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Battle_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "battle.Battle",
	HandlerType: (*BattleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBattle",
			Handler:    _Battle_CreateBattle_Handler,
		},
		{
			MethodName: "WatcherJoinBattle",
			Handler:    _Battle_WatcherJoinBattle_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "servers/battle/proto/battle.proto",
}
