// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: servers/gateway/proto/adapter.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GateAdapterClient is the client API for GateAdapter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GateAdapterClient interface {
	UserMessage(ctx context.Context, in *UserMessageWraper, opts ...grpc.CallOption) (*SteamClosed, error)
	UserStream(ctx context.Context, opts ...grpc.CallOption) (GateAdapter_UserStreamClient, error)
}

type gateAdapterClient struct {
	cc grpc.ClientConnInterface
}

func NewGateAdapterClient(cc grpc.ClientConnInterface) GateAdapterClient {
	return &gateAdapterClient{cc}
}

func (c *gateAdapterClient) UserMessage(ctx context.Context, in *UserMessageWraper, opts ...grpc.CallOption) (*SteamClosed, error) {
	out := new(SteamClosed)
	err := c.cc.Invoke(ctx, "/gateway.GateAdapter/UserMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gateAdapterClient) UserStream(ctx context.Context, opts ...grpc.CallOption) (GateAdapter_UserStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &GateAdapter_ServiceDesc.Streams[0], "/gateway.GateAdapter/UserStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &gateAdapterUserStreamClient{stream}
	return x, nil
}

type GateAdapter_UserStreamClient interface {
	Send(*UserMessageWraper) error
	Recv() (*UserMessageWraper, error)
	grpc.ClientStream
}

type gateAdapterUserStreamClient struct {
	grpc.ClientStream
}

func (x *gateAdapterUserStreamClient) Send(m *UserMessageWraper) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gateAdapterUserStreamClient) Recv() (*UserMessageWraper, error) {
	m := new(UserMessageWraper)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GateAdapterServer is the server API for GateAdapter service.
// All implementations must embed UnimplementedGateAdapterServer
// for forward compatibility
type GateAdapterServer interface {
	UserMessage(context.Context, *UserMessageWraper) (*SteamClosed, error)
	UserStream(GateAdapter_UserStreamServer) error
	mustEmbedUnimplementedGateAdapterServer()
}

// UnimplementedGateAdapterServer must be embedded to have forward compatible implementations.
type UnimplementedGateAdapterServer struct {
}

func (UnimplementedGateAdapterServer) UserMessage(context.Context, *UserMessageWraper) (*SteamClosed, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserMessage not implemented")
}
func (UnimplementedGateAdapterServer) UserStream(GateAdapter_UserStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method UserStream not implemented")
}
func (UnimplementedGateAdapterServer) mustEmbedUnimplementedGateAdapterServer() {}

// UnsafeGateAdapterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GateAdapterServer will
// result in compilation errors.
type UnsafeGateAdapterServer interface {
	mustEmbedUnimplementedGateAdapterServer()
}

func RegisterGateAdapterServer(s grpc.ServiceRegistrar, srv GateAdapterServer) {
	s.RegisterService(&GateAdapter_ServiceDesc, srv)
}

func _GateAdapter_UserMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserMessageWraper)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GateAdapterServer).UserMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gateway.GateAdapter/UserMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GateAdapterServer).UserMessage(ctx, req.(*UserMessageWraper))
	}
	return interceptor(ctx, in, info, handler)
}

func _GateAdapter_UserStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GateAdapterServer).UserStream(&gateAdapterUserStreamServer{stream})
}

type GateAdapter_UserStreamServer interface {
	Send(*UserMessageWraper) error
	Recv() (*UserMessageWraper, error)
	grpc.ServerStream
}

type gateAdapterUserStreamServer struct {
	grpc.ServerStream
}

func (x *gateAdapterUserStreamServer) Send(m *UserMessageWraper) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gateAdapterUserStreamServer) Recv() (*UserMessageWraper, error) {
	m := new(UserMessageWraper)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GateAdapter_ServiceDesc is the grpc.ServiceDesc for GateAdapter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GateAdapter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gateway.GateAdapter",
	HandlerType: (*GateAdapterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserMessage",
			Handler:    _GateAdapter_UserMessage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UserStream",
			Handler:       _GateAdapter_UserStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "servers/gateway/proto/adapter.proto",
}
